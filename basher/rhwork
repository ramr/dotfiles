### Red Hat

SSH_KEY=.ssh/id_rsa_ramr


#  Functions.
function setupvm() {
  local vagrant_bashrc=$(get_basher_dir)/vagrant/dot.bashrc
  local id_rsa=~/$SSH_KEY
  local id_rsa_pub=~/${SSH_KEY}.pub

  vagrant ssh $1 -c "cat >> ~/.bashrc" < ${vagrant_bashrc}
  vagrant ssh $1 -c "rm -f ~/.ssh/id_rsa ~/.ssh/id_rsa.pub"
  vagrant ssh $1 -c "cat >> ~/.ssh/id_rsa" < ${id_rsa}
  vagrant ssh $1 -c "cat >> ~/.ssh/id_rsa.pub" < ${id_rsa_pub}

}  #  End of function  setupvm.


function oscluster() {
  export OPENSHIFT_NUM_CPUS=8
  export OPENSHIFT_MEMORY=4096

  unset OPENSHIFT_DEV_CLUSTER
  unset OPENSHIFT_NUM_MINIONS
  [ -n "$1" ] && return 0

  unset OPENSHIFT_NUM_CPUS
  unset OPENSHIFT_MEMORY

  export OPENSHIFT_DEV_CLUSTER=1
  export OPENSHIFT_NUM_MINIONS=1

}  #  End of function  oscluster.


function osdestroy() {
  local vms="minion-1 minion-2 master"
  [ -z "$OPENSHIFT_DEV_CLUSTER" ] && vms="openshiftdev"
  vagrant destroy -f $vms
  rm -rf .vagrant openshift.local.{config,etcd} openshift.local.volumes/*
  make clean

} #  End of function osdestroy.


function create_test_env() {
  openshift ex policy add-role-to-user view anypassword:test-admin

  sudo chmod +r "${OS3SRCDIR}/openshift.local.config/master/openshift-client.key"
#  openshift ex registry --create --credentials="${KUBECONFIG}"

#  oc describe service docker-registry

  openshift ex new-project test --display-name="OpenShift 3 Sample"  \
     --description="Example project to demonstrate OpenShift v3"     \
     --admin=anypassword:test-admin

}  #  End of function  create_test_env.


function cleanup_router() {
  oc delete rc/router-1 dc/router service/router

}  #  End of function  cleanup_router.


function cleanup_sample_app() {
   local ns="test"
   oc delete -n $ns rc/database-1 dc/database dc/frontend se/database se/frontend

   echo " #### need to clean up pods ... "
   oc get pods -n $ns

   #  Example:
   # oc delete -n test pod build-ruby-sample-build-c72d887c-c8ed-11e4-8bc5-080027c5bfa9
   # oc delete -n test pod database-1-rxjmg

   for k in  deploymentConfigs images builds routes imageRepositories  \
	     buildConfigs ; do
     local uri="http://localhost:4001/v2/keys/${k}/${ns}?recursive=true"
     curl -s -k -X DELETE -vvv "$uri" | python -m json.tool
   done

}  #  End of function  cleanup_sample_app.


function _setup_kube_aliases {
  alias osdevdestroy="osdestroy"
  alias master="vagrant ssh master"
  alias minion1="vagrant ssh minion-1"
  alias minion2="vagrant ssh minion-2"
  alias min1="minion1"
  alias min2="minion2"

}  #  End of function  _setup_kube_aliases.


function dump_etcd_keys() {
  local certsdir="${OS3SRCDIR}/openshift.local.config/master"
  local creds="--cert ${certsdir}/master.etcd-client.crt  \
               --key ${certsdir}/master.etcd-client.key"

  curl ${curlopts} -q -s -k ${creds} https://127.0.0.1:4001/v2/keys/$1

}  #  End of function  _dump_etcd_keys.


function _setup_os3_env() {
  export OS3SRCDIR="${GOPATH}/src/github.com/openshift/origin"

  [ -d "$OS3SRCDIR" ] || export OS3SRCDIR="/vagrant"

  local osbinpath="${OS3SRCDIR}/_output/local/bin/linux/amd64"
  export PATH="${osbinpath}:${PATH}"

  alias cdos3="cd ${OS3SRCDIR}"
  alias cdos="cdos3"
  alias cdsrc="cdos3"
  alias cdpg="cd ${OS3SRCDIR}/../../ramr/src"

  local os3bin=$(which openshift) || "${osbinpath}/openshift"
  # local os3startcmd="${os3bin} start --loglevel=4 &> /tmp/openshift.log"
  local os3startcmd="${os3bin} start &> /tmp/openshift.log"

  alias startos3="cd ${OS3SRCDIR}; sudo bash -c \"nohup ${os3startcmd} &\" "
  alias stopos3="sudo pkill openshift"
  alias restartos3="stopos3 || true; startos3"

  export KUBECONFIG="${OS3SRCDIR}/openshift.local.config/master/admin.kubeconfig"
  export OPENSHIFTCONFIG="${KUBECONFIG}"
  # export CURL_CA_BUNDLE="${OS3SRCDIR}/openshift.local.config/master/ca.crt"
  if [ -f "$KUBECONFIG" ]; then
    [ -r "$KUBECONFIG" ] || sudo chmod +r "$KUBECONFIG"
  fi

}  #  End of function  _setup_os3_env.


function _setup_env() {
  export GOPATH="${WORKAREA}/redhat"
  export PATH=${PATH}:${GOPATH}/bin
  export OS_OUTPUT_GOPATH=1

  alias cdos="cd ${WORKAREA}/redhat/src/github.com/openshift/origin"
  alias cdat="cd ${WORKAREA}/redhat/atomic"
  alias cdoskube="cd ${WORKAREA}/redhat/src/github.com/openshift/origin/Godeps/_workspace/src/github.com/GoogleCloudPlatform/kubernetes/"
  alias cdkube="cd ${WORKAREA}/redhat/src/github.com/ramr/kubernetes"
  alias cdnotes="cd ${WORKAREA}/redhat/notes"
  alias hb="ssh fedora@higgs-boson"
  alias os3dev="ssh ramr@os3dev"
  alias o3dev="os3dev"

  _setup_os3_env

}  #  End of function  _setup_env.


function _rh_env_setup() {
  _setup_env

  _setup_kube_aliases

}  #  End of function  _rh_env_setup.


#
#  main():
#
_rh_env_setup
