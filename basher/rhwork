#!/bin/bash

### Red Hat specific config.

function create_test_env() {
  openshift ex policy add-role-to-user view anypassword:test-admin

  sudo chmod +r "${OS3SRCDIR}/openshift.local.config/master/openshift-client.key"
#  openshift ex registry --create --credentials="${KUBECONFIG}"

#  oc describe service docker-registry

  openshift ex new-project test --display-name="OpenShift 3 Sample"  \
     --description="Example project to demonstrate OpenShift v3"     \
     --admin=anypassword:test-admin

}  #  End of function  create_test_env.


function cleanup_router() {
  oc delete rc/router-1 dc/router service/router

}  #  End of function  cleanup_router.


function cleanup_sample_app() {
   local ns="test"
   oc delete -n $ns rc/database-1 dc/database dc/frontend se/database se/frontend

   echo " #### need to clean up pods ... "
   oc get pods -n $ns

   #  Example:
   # oc delete -n test pod build-ruby-sample-build-c72d887c-c8ed-11e4-8bc5-080027c5bfa9
   # oc delete -n test pod database-1-rxjmg

   for k in  deploymentConfigs images builds routes imageRepositories  \
	     buildConfigs ; do
     local uri="http://localhost:4001/v2/keys/${k}/${ns}?recursive=true"
     curl -s -k -X DELETE -vvv "$uri" | python -m json.tool
   done

}  #  End of function  cleanup_sample_app.


function dump_etcd_keys() {
  local certsdir="${OS3SRCDIR}/openshift.local.config/master"
  local creds="--cert ${certsdir}/master.etcd-client.crt  \
               --key ${certsdir}/master.etcd-client.key"

  curl -q -s -k "${creds}" "https://127.0.0.1:4001/v2/keys/$1"

}  #  End of function  _dump_etcd_keys.


function _setup_os310_aliases() {
  local osbinpath="${OS3SRCDIR}/_output/local/bin/linux/amd64"
  local os3bin
  os3bin=$(which openshift) || "${osbinpath}/openshift"

  local os3startcmd="${os3bin} start &> /tmp/openshift.log"
  local os3startcmd_verbose="${os3bin} start --loglevel=4 &> /tmp/openshift.log"

  local local_cluster_dir="${OS3SRCDIR}/_ramr/local-cluster"

  # shellcheck disable=SC2139
  alias startos3="sudo bash -c \"cd ${local_cluster_dir}; nohup ${os3startcmd} &\" "

  # shellcheck disable=SC2139
  alias startos3dbg="sudo bash -c \"cd ${local_cluster_dir}; nohup ${os3startcmd_verbose} &\" "
  alias stopos3="sudo pkill openshift"

  alias restartos3="stopos3 || true; startos3"

  export KUBECONFIG="${local_cluster_dir}/openshift.local.config/master/admin.kubeconfig"
  export OPENSHIFTCONFIG="${KUBECONFIG}"
  export CURL_CA_BUNDLE="${local_cluster_dir}/openshift.local.config/master/ca.crt"

}  #  End of function  _setup_os310_aliases.


function _setup_os311_aliases() {
  local local_cluster_dir="${OS3SRCDIR}/_ramr/local-cluster"

  # shellcheck disable=SC2139
  alias startos3="sudo bash -c \"cd ${local_cluster_dir}; oc cluster up\" "

  # shellcheck disable=SC2139
  alias startos3dbg="sudo bash -c \"cd ${local_cluster_dir}; oc cluster up --loglevel=4\" "

  # shellcheck disable=SC2139
  alias stopos3="sudo bash -c \"cd ${local_cluster_dir}; oc cluster down\" "

  alias restartos3="stopos3 || true; startos3"

  export KUBECONFIG="${local_cluster_dir}/openshift.local.clusterup/openshift-apiserver/admin.kubeconfig"
  export OPENSHIFTCONFIG="${KUBECONFIG}"
  export CURL_CA_BUNDLE="${local_cluster_dir}/openshift.local.clusterup/openshift-apiserver/ca.crt"

}  #  End of function  _setup_os311_aliases.


function _setup_os3_env() {
  export OS3SRCDIR="${GOPATH}/src/github.com/openshift/origin"

  [ -d "$OS3SRCDIR" ] || export OS3SRCDIR="/vagrant"

  local osbinpath="${OS3SRCDIR}/_output/local/bin/linux/amd64"
  export PATH="${osbinpath}:${PATH}"

  alias cdos3="cd \${OS3SRCDIR}"
  alias cdos="cdos3"
  alias cdsrc="cdos3"
  alias cdpg="cd \${OS3SRCDIR}/../../ramr/src"

  # _setup_os310_aliases
  _setup_os311_aliases

  if [ -f "$KUBECONFIG" ]; then
    [ -r "$KUBECONFIG" ] || sudo chmod +r "$KUBECONFIG"
  fi

  local bcfile="${OS3SRCDIR}/_ramr/os3_bash_completion.sh"

  # shellcheck disable=SC1090
  [ -f "${bcfile}" ] && source "${bcfile}"

}  #  End of function  _setup_os3_env.


function _setup_env() {
  export GOPATH="${WORKAREA}/redhat"
  export PATH=${PATH}:${GOPATH}/bin
  export OS_OUTPUT_GOPATH=1

  alias cdos="cd \${WORKAREA}/redhat/src/github.com/openshift/origin"
  alias cdinst="cd \${WORKAREA}/redhat/src/github.com/installer"
  alias cdingop="cd \${WORKAREA}/redhat/src/github.com/cluster-ingress-operator"
  alias cddnsop="cd \${WORKAREA}/redhat/src/github.com/cluster-dns-operator"
  alias cdoskube="cd \${WORKAREA}/redhat/src/github.com/openshift/origin/vendor/k8s.io/kubernetes"
  alias cdnotes="cd \${WORKAREA}/redhat/notes"

  alias hb="ssh fedora@higgs-boson"
  alias os3dev="ssh ramr@os3dev" # -X "mosh ramr@os3dev -- tmux a"
  alias o3dev="os3dev"

  _setup_os3_env

}  #  End of function  _setup_env.


function _rh_env_setup() {
  _setup_env

}  #  End of function  _rh_env_setup.


#
#  main():
#
_rh_env_setup
